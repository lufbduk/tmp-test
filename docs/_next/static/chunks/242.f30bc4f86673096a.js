(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[242],{7242:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var o=t(8045),a=t(2406),u=t(7076),r=t(1256),s=t(963),l=t(1799),i=t(5177);function c(e){let{focal:n=[.5,.5],rotation:t=[1,0],starSpeed:c=.5,density:v=1,hueShift:f=140,disableAnimation:m=!1,speed:p=1,mouseInteraction:h=!0,glowIntensity:d=.3,saturation:R=0,mouseRepulsion:x=!0,repulsionStrength:y=2,twinkleIntensity:g=.3,rotationSpeed:S=.1,autoCenterRepulsion:w=0,transparent:A=!0,...b}=e,F=(0,i.useRef)(null),C=(0,i.useRef)({x:.5,y:.5}),T=(0,i.useRef)({x:.5,y:.5}),_=(0,i.useRef)(0),M=(0,i.useRef)(0);return(0,i.useEffect)(()=>{let e,o,i;if(!F.current)return;let b=F.current,O=new a.A({alpha:A,premultipliedAlpha:!1}),L=O.gl;A?(L.enable(L.BLEND),L.blendFunc(L.SRC_ALPHA,L.ONE_MINUS_SRC_ALPHA),L.clearColor(0,0,0,0)):L.clearColor(0,0,0,1);let U={w:0,h:0};function E(){let n=Math.max(0,b.clientWidth),t=Math.max(0,b.clientHeight);if(0===n||0===t)return;let o=Math.floor(n),a=Math.floor(t);(U.w!==o||U.h!==a)&&(U.w=o,U.h=a,O.setSize(o,a),L.canvas.style.width=n+"px",L.canvas.style.height=t+"px",e&&(e.uniforms.uResolution.value=new u.Q(L.canvas.width,L.canvas.height,L.canvas.width/L.canvas.height)))}function z(){requestAnimationFrame(E)}"undefined"!=typeof ResizeObserver&&(o=new ResizeObserver(()=>requestAnimationFrame(E))).observe(b),window.addEventListener("resize",z,!1),requestAnimationFrame(E);let k=new r.l(L);e=new s.B(L,{vertex:"\nattribute vec2 uv;\nattribute vec2 position;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0, 1);\n}\n",fragment:"\nprecision highp float;\n\nuniform float uTime;\nuniform vec3 uResolution;\nuniform vec2 uFocal;\nuniform vec2 uRotation;\nuniform float uStarSpeed;\nuniform float uDensity;\nuniform float uHueShift;\nuniform float uSpeed;\nuniform vec2 uMouse;\nuniform float uGlowIntensity;\nuniform float uSaturation;\nuniform bool uMouseRepulsion;\nuniform float uTwinkleIntensity;\nuniform float uRotationSpeed;\nuniform float uRepulsionStrength;\nuniform float uMouseActiveFactor;\nuniform float uAutoCenterRepulsion;\nuniform bool uTransparent;\n\nvarying vec2 vUv;\n\n#define NUM_LAYER 4.0\n#define STAR_COLOR_CUTOFF 0.2\n#define MAT45 mat2(0.7071, -0.7071, 0.7071, 0.7071)\n#define PERIOD 3.0\n\nfloat Hash21(vec2 p) {\n  p = fract(p * vec2(123.34, 456.21));\n  p += dot(p, p + 45.32);\n  return fract(p.x * p.y);\n}\n\nfloat tri(float x) {\n  return abs(fract(x) * 2.0 - 1.0);\n}\n\nfloat tris(float x) {\n  float t = fract(x);\n  return 1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0));\n}\n\nfloat trisn(float x) {\n  float t = fract(x);\n  return 2.0 * (1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0))) - 1.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat Star(vec2 uv, float flare) {\n  float d = length(uv);\n  float m = (0.05 * uGlowIntensity) / d;\n  float rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * flare * uGlowIntensity;\n  uv *= MAT45;\n  rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * 0.3 * flare * uGlowIntensity;\n  m *= smoothstep(1.0, 0.2, d);\n  return m;\n}\n\nvec3 StarLayer(vec2 uv) {\n  vec3 col = vec3(0.0);\n\n  vec2 gv = fract(uv) - 0.5; \n  vec2 id = floor(uv);\n\n  for (int y = -1; y <= 1; y++) {\n    for (int x = -1; x <= 1; x++) {\n      vec2 offset = vec2(float(x), float(y));\n      vec2 si = id + vec2(float(x), float(y));\n      float seed = Hash21(si);\n      float size = fract(seed * 345.32);\n      float glossLocal = tri(uStarSpeed / (PERIOD * seed + 1.0));\n      float flareSize = smoothstep(0.9, 1.0, size) * glossLocal;\n\n      float red = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 1.0)) + STAR_COLOR_CUTOFF;\n      float blu = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 3.0)) + STAR_COLOR_CUTOFF;\n      float grn = min(red, blu) * seed;\n      vec3 base = vec3(red, grn, blu);\n      \n      float hue = atan(base.g - base.r, base.b - base.r) / (2.0 * 3.14159) + 0.5;\n      hue = fract(hue + uHueShift / 360.0);\n      float sat = length(base - vec3(dot(base, vec3(0.299, 0.587, 0.114)))) * uSaturation;\n      float val = max(max(base.r, base.g), base.b);\n      base = hsv2rgb(vec3(hue, sat, val));\n\n      vec2 pad = vec2(tris(seed * 34.0 + uTime * uSpeed / 10.0), tris(seed * 38.0 + uTime * uSpeed / 30.0)) - 0.5;\n\n      float star = Star(gv - offset - pad, flareSize);\n      vec3 color = base;\n\n      float twinkle = trisn(uTime * uSpeed + seed * 6.2831) * 0.5 + 1.0;\n      twinkle = mix(1.0, twinkle, uTwinkleIntensity);\n      star *= twinkle;\n      \n      col += star * size * color;\n    }\n  }\n\n  return col;\n}\n\nvoid main() {\n  vec2 focalPx = uFocal * uResolution.xy;\n  vec2 uv = (vUv * uResolution.xy - focalPx) / uResolution.y;\n\n  vec2 mouseNorm = uMouse - vec2(0.5);\n  \n  if (uAutoCenterRepulsion > 0.0) {\n    vec2 centerUV = vec2(0.0, 0.0);\n    float centerDist = length(uv - centerUV);\n    vec2 repulsion = normalize(uv - centerUV) * (uAutoCenterRepulsion / (centerDist + 0.1));\n    uv += repulsion * 0.05;\n  } else if (uMouseRepulsion) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 repulsion = normalize(uv - mousePosUV) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += repulsion * 0.05 * uMouseActiveFactor;\n  } else {\n    vec2 mouseOffset = mouseNorm * 0.1 * uMouseActiveFactor;\n    uv += mouseOffset;\n  }\n\n  float autoRotAngle = uTime * uRotationSpeed;\n  mat2 autoRot = mat2(cos(autoRotAngle), -sin(autoRotAngle), sin(autoRotAngle), cos(autoRotAngle));\n  uv = autoRot * uv;\n\n  uv = mat2(uRotation.x, -uRotation.y, uRotation.y, uRotation.x) * uv;\n\n  vec3 col = vec3(0.0);\n\n  for (float i = 0.0; i < 1.0; i += 1.0 / NUM_LAYER) {\n    float depth = fract(i + uStarSpeed * uSpeed);\n    float scale = mix(20.0 * uDensity, 0.5 * uDensity, depth);\n    float fade = depth * smoothstep(1.0, 0.9, depth);\n    col += StarLayer(uv * scale + i * 453.32) * fade;\n  }\n\n  if (uTransparent) {\n    float alpha = length(col);\n    alpha = smoothstep(0.0, 0.3, alpha);\n    alpha = min(alpha, 1.0);\n    gl_FragColor = vec4(col, alpha);\n  } else {\n    gl_FragColor = vec4(col, 1.0);\n  }\n}\n",uniforms:{uTime:{value:0},uResolution:{value:new u.Q(L.canvas.width,L.canvas.height,L.canvas.width/L.canvas.height)},uFocal:{value:new Float32Array(n)},uRotation:{value:new Float32Array(t)},uStarSpeed:{value:c},uDensity:{value:v},uHueShift:{value:f},uSpeed:{value:p},uMouse:{value:new Float32Array([T.current.x,T.current.y])},uGlowIntensity:{value:d},uSaturation:{value:R},uMouseRepulsion:{value:x},uTwinkleIntensity:{value:g},uRotationSpeed:{value:S},uRepulsionStrength:{value:y},uMouseActiveFactor:{value:0},uAutoCenterRepulsion:{value:w},uTransparent:{value:A}}});let D=new l.e(L,{geometry:k,program:e});function I(e){let n=b.getBoundingClientRect();C.current={x:(e.clientX-n.left)/n.width,y:1-(e.clientY-n.top)/n.height},_.current=1}function P(){_.current=0}return i=requestAnimationFrame(function n(t){i=requestAnimationFrame(n),m||(e.uniforms.uTime.value=.001*t,e.uniforms.uStarSpeed.value=.001*t*c/10),T.current.x+=(C.current.x-T.current.x)*.05,T.current.y+=(C.current.y-T.current.y)*.05,M.current+=(_.current-M.current)*.05,e.uniforms.uMouse.value[0]=T.current.x,e.uniforms.uMouse.value[1]=T.current.y,e.uniforms.uMouseActiveFactor.value=M.current,O.render({scene:D})}),b.contains(L.canvas)||b.appendChild(L.canvas),h&&(b.addEventListener("mousemove",I),b.addEventListener("mouseleave",P)),()=>{var e;cancelAnimationFrame(i);try{null==o||o.disconnect()}catch(e){}if(window.removeEventListener("resize",z),h&&(b.removeEventListener("mousemove",I),b.removeEventListener("mouseleave",P)),b.contains(L.canvas))try{b.removeChild(L.canvas)}catch(e){}null==(e=L.getExtension("WEBGL_lose_context"))||e.loseContext()}},[n,t,c,v,f,m,p,h,d,R,x,g,S,y,w,A]),(0,o.jsx)("div",{ref:F,className:"galaxy-container",...b})}t(9671)},9671:()=>{}}]);